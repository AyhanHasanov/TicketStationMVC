// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketStationMVC.Data;

#nullable disable

namespace TicketStationMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250123184501_test1")]
    partial class test1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedToCart")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("EventId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3899),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3902),
                            Name = "Music Concert"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3906),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3907),
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3910),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3911),
                            Name = "Theater"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3913),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3915),
                            Name = "Art"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3917),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3919),
                            Name = "Festival"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3921),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3922),
                            Name = "Workshop"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3924),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3926),
                            Name = "Charity"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3928),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3929),
                            Name = "Food & Drinks"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3931),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3933),
                            Name = "Trade show"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3935),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3936),
                            Name = "Family & kids"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4029),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 2, 27, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4013),
                            Description = "A high-energy music festival featuring top rock bands from around the world. Enjoy live performances, food stalls, and exciting activities for all ages. Come for the music, stay for the unforgettable atmosphere!",
                            ImageURL = "/image/rock.jpg",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4030),
                            ModifiedById = 1,
                            Name = "Music Concert: \"Summer Rock Fest\"",
                            Price = 60m,
                            Quantity = 250,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4037),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 5, 8, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4034),
                            Description = "Witness the most thrilling basketball match of the season as the two best teams in the city battle it out for the championship title. Come support your local team and experience the adrenaline rush of the final game!",
                            ImageURL = "/image/football.jpg",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4038),
                            ModifiedById = 1,
                            Name = "Basketball Game: \"City Championship Finals\"",
                            Price = 120m,
                            Quantity = 400,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4043),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 5, 28, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4041),
                            Description = "An outdoor performance of one of Shakespeare's greatest plays, \"A Midsummer Night's Dream.\" Enjoy a magical evening under the stars, with actors performing in a beautiful outdoor setting surrounded by nature.",
                            ImageURL = "/image/william.jpeg",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4045),
                            ModifiedById = 1,
                            Name = "Theater Play: \"Shakespeare Under the Stars\"",
                            Price = 90m,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4050),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 2, 17, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4047),
                            Description = "Join industry leaders, innovators, and tech enthusiasts at the Future of AI Summit. This conference covers the latest advancements in artificial intelligence, machine learning, and their impact on industries like healthcare, finance, and entertainment.",
                            ImageURL = "/image/ai.jpg",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4051),
                            ModifiedById = 1,
                            Name = "Tech Conference: \"Future of AI Summit\"",
                            Price = 20m,
                            Quantity = 70,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4056),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 11, 14, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4054),
                            Description = "A day of family-friendly activities, games, and entertainment at the Magic Kingdom. Kids can enjoy carnival rides, face painting, storytelling sessions, and more. Perfect for families looking to spend quality time together.",
                            ImageURL = "/image/disney.jpg",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(4057),
                            ModifiedById = 1,
                            Name = "Family Fun Day: \"Magic Kingdom Adventure\"",
                            Price = 200m,
                            Quantity = 700,
                            Status = true
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.EventCategories", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            EventId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            EventId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            EventId = 5,
                            CategoryId = 8
                        },
                        new
                        {
                            EventId = 5,
                            CategoryId = 10
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 31, DateTimeKind.Local).AddTicks(2139),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 31, DateTimeKind.Local).AddTicks(2207),
                            Name = "adminuser"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 31, DateTimeKind.Local).AddTicks(2211),
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 31, DateTimeKind.Local).AddTicks(2213),
                            Name = "ordinaryuser"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(2958),
                            Email = "admin@admin.com",
                            ModifiedAt = new DateTime(2025, 1, 23, 20, 45, 0, 369, DateTimeKind.Local).AddTicks(3028),
                            Name = "Administrator",
                            Password = "$2a$11$BpKxPpqmAzpwmOVXf9zLzOQJHIeoFkIy9zs9Qrc2Pqy1TTfDiOdzy",
                            RegisteredOn = new DateTime(2025, 1, 23, 20, 45, 0, 31, DateTimeKind.Local).AddTicks(2380),
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.CartItem", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketStationMVC.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.EventCategories", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketStationMVC.Data.Entities.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.User", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Category", b =>
                {
                    b.Navigation("EventCategories");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.Navigation("EventCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
