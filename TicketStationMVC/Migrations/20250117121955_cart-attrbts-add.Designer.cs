// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketStationMVC.Data;

#nullable disable

namespace TicketStationMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250117121955_cart-attrbts-add")]
    partial class cartattrbtsadd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedToCart")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("EventId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7386),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7388),
                            Name = "Music Concert"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7392),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7394),
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7397),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7399),
                            Name = "Theater"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7402),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7404),
                            Name = "Art"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7431),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7433),
                            Name = "Festival"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7438),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7440),
                            Name = "Workshop"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7443),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7465),
                            Name = "Charity"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7468),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7470),
                            Name = "Food & Drinks"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7472),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7474),
                            Name = "Trade show"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7477),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7479),
                            Name = "Family & kids"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7562),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 2, 21, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7543),
                            Description = "A high-energy music festival featuring top rock bands from around the world. Enjoy live performances, food stalls, and exciting activities for all ages. Come for the music, stay for the unforgettable atmosphere!",
                            ImageURL = "/image/rock.jpg",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7564),
                            ModifiedById = 1,
                            Name = "Music Concert: \"Summer Rock Fest\"",
                            Price = 60m,
                            Quantity = 250,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7572),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 5, 2, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7569),
                            Description = "Witness the most thrilling basketball match of the season as the two best teams in the city battle it out for the championship title. Come support your local team and experience the adrenaline rush of the final game!",
                            ImageURL = "/image/football.jpg",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7574),
                            ModifiedById = 1,
                            Name = "Basketball Game: \"City Championship Finals\"",
                            Price = 120m,
                            Quantity = 400,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7586),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 5, 22, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7577),
                            Description = "An outdoor performance of one of Shakespeare's greatest plays, \"A Midsummer Night's Dream.\" Enjoy a magical evening under the stars, with actors performing in a beautiful outdoor setting surrounded by nature.",
                            ImageURL = "/image/william.jpeg",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7633),
                            ModifiedById = 1,
                            Name = "Theater Play: \"Shakespeare Under the Stars\"",
                            Price = 90m,
                            Quantity = 50,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7639),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 2, 11, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7636),
                            Description = "Join industry leaders, innovators, and tech enthusiasts at the Future of AI Summit. This conference covers the latest advancements in artificial intelligence, machine learning, and their impact on industries like healthcare, finance, and entertainment.",
                            ImageURL = "/image/ai.jpg",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7641),
                            ModifiedById = 1,
                            Name = "Tech Conference: \"Future of AI Summit\"",
                            Price = 20m,
                            Quantity = 70,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7646),
                            CreatedById = 1,
                            DateOfEvent = new DateTime(2025, 11, 8, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7644),
                            Description = "A day of family-friendly activities, games, and entertainment at the Magic Kingdom. Kids can enjoy carnival rides, face painting, storytelling sessions, and more. Perfect for families looking to spend quality time together.",
                            ImageURL = "/image/disney.jpg",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(7648),
                            ModifiedById = 1,
                            Name = "Family Fun Day: \"Magic Kingdom Adventure\"",
                            Price = 200m,
                            Quantity = 700,
                            Status = true
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.EventCategories", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            EventId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            EventId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            EventId = 5,
                            CategoryId = 8
                        },
                        new
                        {
                            EventId = 5,
                            CategoryId = 10
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 613, DateTimeKind.Local).AddTicks(4858),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 613, DateTimeKind.Local).AddTicks(4925),
                            Name = "adminuser"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 613, DateTimeKind.Local).AddTicks(4928),
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 613, DateTimeKind.Local).AddTicks(4930),
                            Name = "ordinaryuser"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(6918),
                            Email = "admin@admin.com",
                            ModifiedAt = new DateTime(2025, 1, 17, 14, 19, 54, 735, DateTimeKind.Local).AddTicks(6998),
                            Name = "Administrator",
                            Password = "$2a$11$HLca8QudF2TGKgvi/JdiwuPO6PsVqJ57.q5X4oGWdqIHnh0ehzYUS",
                            RegisteredOn = new DateTime(2025, 1, 17, 14, 19, 54, 613, DateTimeKind.Local).AddTicks(5054),
                            RoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TicketStationMVC.ViewModels.Cart.CartItemVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddedToCart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CartVMId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartVMId");

                    b.ToTable("CartItemVM");
                });

            modelBuilder.Entity("TicketStationMVC.ViewModels.Cart.CartVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("CartVM");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.CartItem", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketStationMVC.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.EventCategories", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketStationMVC.Data.Entities.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.User", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TicketStationMVC.ViewModels.Cart.CartItemVM", b =>
                {
                    b.HasOne("TicketStationMVC.ViewModels.Cart.CartVM", null)
                        .WithMany("Items")
                        .HasForeignKey("CartVMId");
                });

            modelBuilder.Entity("TicketStationMVC.ViewModels.Cart.CartVM", b =>
                {
                    b.HasOne("TicketStationMVC.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Category", b =>
                {
                    b.Navigation("EventCategories");
                });

            modelBuilder.Entity("TicketStationMVC.Data.Entities.Event", b =>
                {
                    b.Navigation("EventCategories");
                });

            modelBuilder.Entity("TicketStationMVC.ViewModels.Cart.CartVM", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
